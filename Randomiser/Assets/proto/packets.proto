syntax = "proto3";

package Network;

message Packet {
  enum PacketID {
    Invalid = 0;
    SyncBoardMessage = 1;
    RequestUpdatesMessage = 2;
    UberStateUpdateMessage = 3;
    SyncBingoUniversesMessage = 4;
    InitGameSyncMessage = 5;
    PrintTextMessage_Deprecated = 6;
    UberStateBatchUpdateMessage = 7;
    MultiverseInfoMessage = 8;
    AuthenticateMessage = 9;
    PlayerPositionMessage = 10;
    UpdatePlayerPositionMessage = 11;
    AuthenticatedMessage = 12;
    PrintTextMessage = 13;
    PrintPickupMessage = 14;
    RequestSeedMessage = 15;
    SetSeedMessage = 16;
    PlayerUseCatchingAbility = 17;
    PlayerUsedCatchingAbility = 18;
    PlayerCaught = 19;
    Visibility = 20;
    UpdatePlayerWorldPositionMessage = 21;
    UpdatePlayerMapPositionMessage = 22;
    ResourceRequestMessage = 23;
    PlayerTeleportMessage = 24;
    ReportLoadingTimeMessage = 25;
    SetBlockStartingNewGameMessage = 26;
    ReportPlayerRaceReadyMessage = 27;

    TrackerUpdate = 100;
    ResetTracker = 101;
    TrackerFlagsUpdate = 102;
    RequestFullUpdate = 103;
    SetTrackerEndpointId = 104;

    NotifyTeleport = 500;
  }

  PacketID id = 1;
  bytes packet = 2;
}

message UberStateBatchUpdateMessage {
  repeated UberStateUpdateMessage updates = 1;
  bool resetBeforeApplying = 2;
}

message UberStateUpdateMessage {
  UberId state = 1;
  double value = 2;
}

message UberId {
  int32 group = 1;
  int32 state = 2;
}

message InitGameSyncMessage {
  repeated UberId uberId = 1;
  bool blockStartingNewGame = 2;
}

message Vector2 {
  float x = 1;
  float y = 2;
}

message PrintTextMessage {
  string text = 1;
  Vector2 position = 2;
  optional int32 id = 3;
  optional float time = 4;
  int32 screenPosition = 5;
  bool useInGameCoordinates = 6;
  float fadeInLength = 7;
  float fadeOutLength = 8;
  int32 alignment = 9;
  int32 horizontalAnchor = 10;
  int32 verticalAnchor = 11;
  bool withSound = 12;
  bool withBox = 13;
  optional string queue = 14;
  bool prioritized = 15;
}

message PrintPickupMessage {
  float time = 1;
  string text = 2;
  bool prioritized = 3;
  optional Vector2 pickupPosition = 4;
}

message AuthenticateMessage {
  string jwt = 1;
}

message AuthenticatedMessage {
  UserInfo user = 1;
  int32 udpId = 2;
  bytes udpKey = 3;
}

message RequestSeedMessage {
  bool init = 1;
}

message SetSeedMessage {
  string name = 1;
  string seed = 2;
  bool init = 3;
}

message PlayerPositionMessage  {
  float x = 1;
  float y = 2;
  bytes ghostFrameData = 3;
}

message UpdatePlayerPositionMessage  {
  string playerId = 1;
  float x = 2;
  float y = 3;
  bytes ghostFrameData = 4;
}

message UpdatePlayerMapPositionMessage  {
  string playerId = 1;
  float x = 2;
  float y = 3;
}

message UpdatePlayerWorldPositionMessage  {
  string playerId = 1;
  float x = 2;
  float y = 3;
  bytes ghostFrameData = 4;
}

message UserInfo {
  string id = 1;
  string name = 2;
  optional string avatarId = 3;
  optional int64 connectedMultiverseId = 4;
  optional int64 currentMultiverseId = 5;
  bool raceReady = 8;
}

message WorldInfo {
  int64 id = 1;
  string name = 2;
  string color = 3;
  repeated UserInfo members = 4;
  optional int64 seedId = 5;
}

message UniverseInfo {
  int64 id = 1;
  string name = 2;
  string color = 3;
  repeated WorldInfo worlds = 4;
}

message MultiverseInfoMessage {
  enum GameHandlerType {
    Normal = 0;
    HideAndSeek = 1;
    Infection = 2;
  }

  int64 id = 1;
  repeated UniverseInfo universes = 2;
  bool hasBingoBoard = 3;
  repeated UserInfo spectators = 4;
  optional int64 seedGroupId = 5;
  GameHandlerType handlerType = 6;
  bytes handlerInfo = 7;
  optional VisibilityMessage visibility = 8;
}

message VisibilityMessage {
  repeated string hidden_in_world = 1;
  repeated string hidden_on_map = 2;
}

message SeekerWorldInfo {
  int64 id = 1;
  float radius = 2;
  float cooldown = 3;
}

message HideAndSeekGameHandlerClientInfo {
  repeated SeekerWorldInfo seekerWorlds = 1;
}

message InfectedWorldInfo {
  int64 id = 1;
  float radius = 2;
  float cooldown = 3;
}

message InfectionGameHandlerClientInfo {
  repeated InfectedWorldInfo infectedWorlds = 1;
}

message PlayerUseCatchingAbilityMessage {}

message PlayerUsedCatchingAbilityMessage {
  string id = 1;
}

message PlayerCaughtMessage {
  string id = 1;
}

message UdpPacket {
  optional int32 udpId = 1;
  bytes encryptedPacket = 2;
}

message SpendResourceTarget {
  enum UpdateCondition {
    UpdateIfLarger = 0;
    UpdateIfSmaller = 1;
    UpdateIfDifferent = 2;
  }

  UberId uberId = 1;
  double value = 2;
  UpdateCondition updateIf = 3;
}

message ResourceRequestMessage {
  UberId resourceUberId = 1;
  bool relative = 2;
  int32 amount = 3;
  optional SpendResourceTarget target = 4;
}

message PlayerTeleportMessage {}

message ReportLoadingTimeMessage {
  float loading_time = 1;
}

message SetBlockStartingNewGameMessage {
  bool blockStartingNewGame = 1;
}

message ReportPlayerRaceReadyMessage {
  bool raceReady = 1;
}